grammar schlingel.bplaced.net.LSGL with org.eclipse.xtext.common.Terminals

generate lSGL "http://www.bplaced.schlingel/net/LSGL"

Model:
	(generators += Generator
		| types += Type
		| projections += Projection)*
	;
	
Generator:
	'def' 'generator' name=ID
		(properties+=ConfigProperty | configs+=Config )*
	'end'
;	
	
Config:
	'def' 'config' name=ID
		properties+=ConfigProperty
		(',' properties+=ConfigProperty)*
	'end'
;	

ConfigProperty:
	name=ID ':' value=STRING
;

Type:	
	Enum | Entity 
;

Enum:
	'def' 'enum' name=ID
	items+=EnumItem
	(',' items+=EnumItem)*
	'end'
;

EnumItem:
	name=ID ':' value=STRING 	
;

Entity:
	(generatorAnnotations += GeneratorAnnotation)*
	'def' 'entity' name=ID ('extends' superClass=[Entity | QualifiedName])?
		(attributes+=Attribute)*
	'end'
;

AttributeType:
	(type=[Type | QualifiedName]
		| (
			(nullable ?= ('nullable' | 'object' | 'o'))?
			typeName = (
				'string'
				| 'int'
				| 'byte'
				| 'char'
				| 'float'
				| 'double'
				| 'bool'
				| 'object'
				| 'long'
			)
		)
	)
;

Attribute:
	('@annotation' '(' annotations+=Annotation ')')*
	(isMap ?= 'map' key = AttributeType ',')?
	type = AttributeType
	(isList ?= 'list')?
	(isArray ?= 'array')?
	name=ID
;

Annotation:
	name=STRING (',' value=STRING)?
;

GeneratorConfig:
	cfgName=STRING ('=' values+=STRING (':' values+=STRING)*)?
;

GeneratorAnnotation:
	'@generator' '(' generator = [Generator | QualifiedName] (',' configItem = [Config | QualifiedName])? (',' (customConfig+=GeneratorConfig)+)* ')'
;

Projection:
	(generatorAnnotations += GeneratorAnnotation)*
	'def' (excluding?='excluding')? 'projection' name=ID 'of' entity=[Entity | QualifiedName]
		(attributes+=Attribute)*
	'end'
;

QualifiedName:
	ID ('.'ID)*
;